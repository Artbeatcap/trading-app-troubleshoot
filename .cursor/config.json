{
  "remote": {
    "sshArgs": [
      "-o", "ServerAliveInterval=30",
      "-o", "ServerAliveCountMax=3"
    ]
  },
  "tasks": [
    {
      "label": "Deploy to Hostinger VPS",
      "type": "shell",
      "command": "ssh",
      "args": [
        "-o", "ServerAliveInterval=30",
        "-o", "ServerAliveCountMax=3",
        "root@167.88.43.61",
        "\nset -e; \ncd /home/tradingapp/trading-analysis;\n\necho \">>> pulling latest code\";\ngit pull origin main;\n\necho \">>> activating venv\";\nsource venv/bin/activate;\n\necho \">>> installing deps\";\npip install --no-cache-dir -r requirements.txt;\n\necho \">>> applying migrations\";\nflask db upgrade;\n\necho \">>> restarting app via supervisor\";\nsupervisorctl reread;\nsupervisorctl update;\nsupervisorctl restart stockapp;\n\necho \">>> reloading nginx (just in case)\";\nsystemctl reload nginx;\n\necho \"✓ Deploy completed.\"\n"
      ],
      "problemMatcher": []
    },
    {
      "label": "Init Postgres",
      "type": "shell",
      "command": "ssh",
      "args": [
        "-o", "ServerAliveInterval=30",
        "-o", "ServerAliveCountMax=3",
        "root@167.88.43.61",
        "\nset -e\n\n# Helper: run a psql query as the postgres OS user\nrun_psql() {\n  sudo -u postgres psql -qtAc \"$1\"\n}\n\necho \">>> checking / creating database\"\nDB_EXISTS=$(run_psql \"SELECT 1 FROM pg_database WHERE datname = 'trading_analysis';\")\nif [[ -z \"$DB_EXISTS\" ]]; then\n  run_psql \"CREATE DATABASE trading_analysis;\"\n  echo \"    created database trading_analysis\"\nelse\n  echo \"    database already exists\"\nfi\n\necho \">>> checking / creating role\"\nROLE_EXISTS=$(run_psql \"SELECT 1 FROM pg_roles WHERE rolname = 'trading_user';\")\nif [[ -z \"$ROLE_EXISTS\" ]]; then\n  run_psql \"CREATE ROLE trading_user LOGIN PASSWORD 'Hvjband12345';\"\n  echo \"    created role trading_user\"\nelse\n  echo \"    role already exists\"\nfi\n\necho \">>> granting privileges\"\nrun_psql \"GRANT ALL PRIVILEGES ON DATABASE trading_analysis TO trading_user;\"\n\necho '✓ Postgres init complete.'\n"
      ],
      "problemMatcher": []
    }
  ]
}